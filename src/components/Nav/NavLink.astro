---
import { getRelativeLocaleUrl } from "astro:i18n";
import { Icon } from "astro-icon/components";

// utils
import { getLocaleFromUrl } from "@js/localeUtils";

// data
import { type navLinkItem } from "@config/types/configDataTypes";

interface Props {
	navItem: navLinkItem;
	class?: string;
	noIcon?: boolean;
}

const { navItem, class: className, noIcon = false } = Astro.props as Props;
const { text, link, newTab = false, icon, description } = navItem;

const currLocale = getLocaleFromUrl(Astro.url);

// Handle link processing for both internal and external URLs
const domain = import.meta.env.SITE; // pulls from astro.config.mjs
let actualLink: string;
if (!link.includes(domain) && !link.startsWith("/") && !link.startsWith("#")) {
	// it is an external link
	actualLink = link;
} else {
	// internal link, so we need to add the locale to the link
	actualLink = getRelativeLocaleUrl(currLocale, link);
}
// remove trailing slash so IDs will work
if (actualLink.endsWith("/") && actualLink !== "/") {
	actualLink = actualLink.slice(0, -1);
}

// Check if this is a coming soon page to conditionally show the tooltip
const isComingSoon = actualLink.includes("/coming-soon");
---

<li>
	<a
		class:list={[
			`nav__link--base relative flex h-10 w-full items-center gap-1.5 rounded-sm px-4 py-1.5 transition duration-200 ${className}`,
			{
				// styling for current active page link, if desired
				"": Astro.url.pathname === actualLink,
			},
		]}
		href={actualLink}
		target={newTab ? "_blank" : ""}
		rel={newTab ? "noopener noreferrer" : ""}
		aria-label={text}
		data-tooltip={isComingSoon ? "Coming Soon" : description || ""}
	>
		{
			icon && !noIcon && (
				<Icon name={icon} aria-hidden="true" class="mt-1 size-5 self-start md:size-4" />
			)
		}
		{text}
	</a>
</li>

<style>
	/* Base tooltip positioning */
	[data-tooltip] {
		position: relative;
	}

	/* Tooltip content styling */
	[data-tooltip]:hover::before {
		content: attr(data-tooltip);
		position: absolute;
		bottom: 100%;
		left: 50%;
		transform: translateX(-50%);
		padding: 0.5rem 0.75rem;
		background-color: rgb(17, 24, 39);
		color: white;
		border-radius: 0.375rem;
		font-size: 0.875rem;
		white-space: nowrap;
		z-index: 50;
		margin-bottom: 0.5rem;
		box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
		animation: tooltipFadeIn 0.2s ease-out;
	}

	/* Tooltip arrow styling */
	[data-tooltip]:hover::after {
		content: '';
		position: absolute;
		bottom: 100%;
		left: 50%;
		transform: translateX(-50%);
		border: 4px solid transparent;
		border-top-color: rgb(17, 24, 39);
		margin-bottom: -4px;
		z-index: 50;
		animation: tooltipFadeIn 0.2s ease-out;
	}

	/* Hide tooltip and arrow if no content is provided */
	[data-tooltip=""]:hover::before,
	[data-tooltip=""]:hover::after {
		display: none;
	}

	/* Fade in and slide up animation for tooltip */
	@keyframes tooltipFadeIn {
		from {
			opacity: 0;
			transform: translate(-50%, 4px);
		}
		to {
			opacity: 1;
			transform: translate(-50%, 0);
		}
	}
</style>